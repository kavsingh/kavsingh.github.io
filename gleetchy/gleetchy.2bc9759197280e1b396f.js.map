{"version":3,"sources":["webpack:///../../../src/renderers/svg-path/build.js"],"names":[],"mappings":"8BAMM,WAAkB,MAA4D,oBAG5E,IACA,KAIF,YAMQ,MANO,yBAGb,WAAM,EAGR,OACA,OAIE,IAzBR,eA4BQ,MAEc,uBAEjB,GACF,mCAEG,gBACK,cAGF,OACR","file":"gleetchy.2bc9759197280e1b396f.js","sourcesContent":["/*\n  Convert percentage to pixels\n\n  @param [number]: Percentage of total length\n  @param [number]: Total length\n*/\nconst percentToPixels = (percent, length) => (parseFloat(percent) / 100) * length + 'px';\n\nexport default (state, length) => {\n  const styles = {};\n  const dashArrayStyles = {\n    length: '0',\n    spacing: length + 'px'\n  };\n  let hasDashArray = false;\n\n  for (let key in state) {\n    if (state.hasOwnProperty(key)) {\n      const value = state[key];\n\n      switch (key) {\n      case 'length':\n      case 'spacing':\n        hasDashArray = true;\n        dashArrayStyles[key] = percentToPixels(value, length);\n        break;\n      case 'offset':\n        styles['stroke-dashoffset'] = percentToPixels(-value, length);\n        break;\n      default:\n        styles[key] = value;\n      }\n    }\n  }\n\n  if (hasDashArray) {\n    styles['stroke-dasharray'] = dashArrayStyles.length + ' ' + dashArrayStyles.spacing;\n  }\n\n  return styles;\n};\n\n\n\n// WEBPACK FOOTER //\n// ../../../src/renderers/svg-path/build.js"],"sourceRoot":""}